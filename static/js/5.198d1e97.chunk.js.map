{"version":3,"sources":["components/MovieCard/index.module.css","pages/Home/index.module.css","components/SearchBox/index.tsx","components/MovieCard/index.tsx","components/MovieCard/Skeleton.tsx","pages/Home/index.tsx","utils/constants.ts","utils/service.ts"],"names":["module","exports","useStyles","makeStyles","theme","root","padding","display","alignItems","backgroundColor","border","input","marginLeft","spacing","flex","iconButton","SearchBox","onChange","className","classes","inputRef","useRef","handleChange","current","value","Paper","InputBase","placeholder","fullWidth","onKeyPress","e","key","IconButton","type","onClick","defaultProps","MovieCard","Title","Year","imdbID","Poster","Type","history","useHistory","Card","styles","CardActionArea","cardArea","push","CardMedia","component","alt","height","image","title","poster","CardContent","overText","CardActions","actionsContainer","Typography","gutterBottom","yearSection","fontSize","Skeleton","animation","variant","width","Home","useState","searchText","setSearchText","currentPage","setCurrentPage","useEffect","remove","setTimeout","refetch","useInfiniteQuery","pageParam","service","get","CONSTANTS","BASE_URL","s","page","TYPE","getNextPageParam","lastPage","pages","totalResults","enabled","length","onSuccess","data","error","fetchNextPage","hasNextPage","isSuccess","isLoading","MoviesLoader","itemCount","Grid","container","Array","map","_","i","item","xs","md","justify","sm","searchBox","text","movieListContainer","dataLength","reduce","a","b","Search","next","hasMore","loader","style","overflow","errorMessageContainer","JSON","stringify","API_KEY","getBaseURL","url","URLSearchParams","apikey","toString","params","fetch","method","cache","headers","then","res","json","response","Response","Error","message","post","body"],"mappings":"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","file":"static/js/5.198d1e97.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"MovieCard_root__1buv7\",\"cardArea\":\"MovieCard_cardArea__2t4d5\",\"actionsContainer\":\"MovieCard_actionsContainer__woHa3\",\"poster\":\"MovieCard_poster__2pdFw\",\"yearSection\":\"MovieCard_yearSection__3_FS1\",\"overText\":\"MovieCard_overText__4NA9Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Home_root__14EsI\",\"searchBox\":\"Home_searchBox__QE6GZ\",\"movieListContainer\":\"Home_movieListContainer__37hL2\",\"errorMessageContainer\":\"Home_errorMessageContainer__rk5Vf\"};","import { ReactElement, useRef } from \"react\";\r\nimport { makeStyles, Paper, InputBase, IconButton } from \"@material-ui/core\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n\r\ntype SearchBoxProps = {\r\n  onChange: (text: string) => void;\r\n  className?: string;\r\n};\r\nconst defaultProps = {\r\n  onChange: () => {},\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: \"2px 4px\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    backgroundColor: \"#000000\",\r\n    border: \"1px solid #f6c700\",\r\n  },\r\n  input: {\r\n    marginLeft: theme.spacing(1),\r\n    flex: 1,\r\n  },\r\n  iconButton: {\r\n    padding: 10,\r\n  },\r\n}));\r\n\r\nconst SearchBox = ({ onChange, className }: SearchBoxProps): ReactElement => {\r\n  const classes = useStyles();\r\n  const inputRef = useRef<HTMLInputElement | null>(null);\r\n\r\n  const handleChange = () => {\r\n    if (!!inputRef.current) {\r\n      onChange(inputRef.current.value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Paper className={`${classes.root} ${className}`}>\r\n      <InputBase\r\n        className={classes.input}\r\n        placeholder=\"Search for a movie\"\r\n        inputRef={inputRef}\r\n        fullWidth\r\n        onKeyPress={(e) => {\r\n          if (e.key === \"Enter\") {\r\n            handleChange();\r\n          }\r\n        }}\r\n      />\r\n      <IconButton\r\n        type=\"submit\"\r\n        className={classes.iconButton}\r\n        onClick={handleChange}\r\n      >\r\n        <SearchIcon />\r\n      </IconButton>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nSearchBox.defaultProps = defaultProps;\r\n\r\nexport default SearchBox;\r\n","import styles from \"./index.module.css\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CalendarToday from \"@material-ui/icons/CalendarToday\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nexport type MovieCardProps = {\r\n  Title: string;\r\n  Year: string;\r\n  imdbID: string;\r\n  Type: string;\r\n  Poster: string;\r\n};\r\n\r\nconst MovieCard = ({ Title, Year, imdbID, Type, Poster }: MovieCardProps) => {\r\n  const history = useHistory();\r\n  const handleMovieSelect = () => {\r\n    history.push(`/${imdbID}`);\r\n  };\r\n\r\n  return (\r\n    <Card className={styles.root}>\r\n      <CardActionArea className={styles.cardArea} onClick={handleMovieSelect}>\r\n        <CardMedia\r\n          component=\"img\"\r\n          alt={Title}\r\n          height=\"400\"\r\n          image={Poster}\r\n          title={Title}\r\n          className={styles.poster}\r\n        />\r\n        <CardContent className={styles.overText}>\r\n            <h2>{Title}</h2>\r\n        </CardContent>\r\n      </CardActionArea>\r\n      <CardActions className={styles.actionsContainer}>\r\n        <Typography gutterBottom component=\"i\" className={styles.yearSection}>\r\n          <CalendarToday fontSize=\"small\" />\r\n          &nbsp;\r\n          {Year}\r\n        </Typography>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default MovieCard;\r\n","import styles from \"./index.module.css\";\r\nimport { default as MuiSkeleton } from \"@material-ui/lab/Skeleton\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\n\r\nconst Skeleton = (): React.ReactElement => {\r\n  return (\r\n    <Card className={styles.root}>\r\n      <CardActionArea>\r\n        <MuiSkeleton\r\n          animation=\"wave\"\r\n          variant=\"rect\"\r\n          width=\"100%\"\r\n          height={400}\r\n        />\r\n        <CardContent className={styles.overText}>\r\n          <MuiSkeleton\r\n            animation=\"wave\"\r\n            variant=\"text\"\r\n            width=\"80%\"\r\n            height={40}\r\n          />\r\n        </CardContent>\r\n      </CardActionArea>\r\n      <CardActions className={styles.actionsContainer}>\r\n        <MuiSkeleton animation=\"wave\" variant=\"text\" width={100} height={40} />\r\n        <MuiSkeleton animation=\"wave\" variant=\"circle\" width={40} height={40} />\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Skeleton;\r\n","import { useState, useEffect, ReactElement } from \"react\";\r\nimport styles from \"./index.module.css\";\r\nimport SearchBox from \"components/SearchBox\";\r\nimport service from \"utils/service\";\r\nimport CONSTANTS from \"utils/constants\";\r\nimport { useInfiniteQuery } from \"react-query\";\r\nimport MovieCard, { MovieCardProps } from \"components/MovieCard\";\r\nimport Skeleton from \"components/MovieCard/Skeleton\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\nconst Home = (): ReactElement => {\r\n  const [searchText, setSearchText] = useState(\"man\"); // Initial value set to 'man' to display default search results on UI\r\n  const [currentPage, setCurrentPage] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setCurrentPage(0);\r\n    remove();\r\n    setTimeout(() => {\r\n      refetch();\r\n    }, 1000);\r\n  }, [searchText]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const handleSearchChange = (text: string) => {\r\n    setSearchText(text);\r\n  };\r\n\r\n  const fetchMovies = ({ pageParam = 1 }) =>\r\n    service.get(CONSTANTS.BASE_URL, {\r\n      s: searchText,\r\n      page: pageParam,\r\n      type: CONSTANTS.TYPE,\r\n    });\r\n\r\n  const {\r\n    data,\r\n    error,\r\n    fetchNextPage,\r\n    hasNextPage,\r\n    isSuccess,\r\n    isLoading,\r\n    refetch,\r\n    remove,\r\n  } = useInfiniteQuery(`movies`, fetchMovies, {\r\n    getNextPageParam: (lastPage, pages) => {\r\n      return +lastPage.totalResults > currentPage * 10 ? currentPage + 1 : null;\r\n    },\r\n    enabled: !!searchText.length,\r\n    onSuccess: () => {\r\n      setCurrentPage(currentPage + 1);\r\n    },\r\n  });\r\n\r\n  const MoviesLoader = (itemCount: number): ReactElement => {\r\n    return (\r\n      <Grid container spacing={2}>\r\n        {[...new Array(itemCount)].map((_, i: number) => (\r\n          <Grid item xs={12} md={3} key={i}>\r\n            <Skeleton />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className={styles.root}>\r\n      <Grid container justify=\"center\">\r\n        <Grid item xs={12} sm={10}>\r\n          <Grid container justify=\"center\">\r\n            <Grid item xs={12} md={4}>\r\n              <SearchBox\r\n                className={styles.searchBox}\r\n                onChange={handleSearchChange}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} className={styles.movieListContainer}>\r\n            {/* Loading state */}\r\n            {isLoading && MoviesLoader(8)}\r\n\r\n            {/* Success state */}\r\n            {isSuccess &&\r\n              (!!data ? (\r\n                <InfiniteScroll\r\n                  dataLength={\r\n                    data.pages.reduce((a, b) => {\r\n                      return { Search: [...a.Search, ...b.Search] };\r\n                    }).Search.length\r\n                  }\r\n                  next={fetchNextPage}\r\n                  hasMore={hasNextPage || false}\r\n                  loader={MoviesLoader(4)}\r\n                  style={{ overflow: \"hidden\" }}\r\n                >\r\n                  <Grid container spacing={2}>\r\n                    {data.pages\r\n                      .reduce((a, b) => {\r\n                        return { Search: [...a.Search, ...b.Search] };\r\n                      })\r\n                      .Search.map(\r\n                        ({\r\n                          Title,\r\n                          imdbID,\r\n                          Type,\r\n                          Year,\r\n                          Poster,\r\n                        }: MovieCardProps) => (\r\n                          <Grid item xs={12} md={3} key={imdbID}>\r\n                            <MovieCard\r\n                              {...{ Title, imdbID, Type, Year, Poster }}\r\n                            />\r\n                          </Grid>\r\n                        )\r\n                      )}\r\n                  </Grid>\r\n                </InfiniteScroll>\r\n              ) : (\r\n                \"No Result\"\r\n              ))}\r\n\r\n            {/* Error state */}\r\n            {!!error && (\r\n              <div className={styles.errorMessageContainer}>\r\n                {JSON.stringify(error)}\r\n              </div>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","const CONSTANTS = {\r\n  BASE_URL: \"https://www.omdbapi.com/\",\r\n  API_KEY: \"b9bd48a6\",\r\n  TYPE: \"movie\"\r\n};\r\n\r\nexport default CONSTANTS;\r\n","import CONSTANTS from \"utils/constants\";\r\n\r\n/**\r\n * Generate base URL including OMDB required params\r\n * @param {string} url\r\n * @returns {string}\r\n */\r\nconst getBaseURL = (url: string): string => {\r\n  return `${url}?${new URLSearchParams({\r\n    apikey: CONSTANTS.API_KEY,\r\n  }).toString()}`;\r\n};\r\n\r\n/**\r\n * Service object exported to use across application\r\n */\r\nconst service = {\r\n  get: async (url: string, params: object) => {\r\n    try {\r\n      let response = await fetch(\r\n        `${getBaseURL(url)}&${new URLSearchParams({\r\n          ...params,\r\n        }).toString()}`,\r\n        {\r\n          method: \"GET\",\r\n          cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n          headers: {\r\n            \"Content-Type\": \"application/x-www-form-urlencoded\", // application/x-www-form-urlencoded, application/json\r\n          },\r\n        }\r\n      ).then((res) => res.json());\r\n\r\n      if (response.Response === \"False\") {\r\n        throw Error(response.Error);\r\n      } else {\r\n        return response;\r\n      }\r\n    } catch (error) {\r\n      throw error.message;\r\n    }\r\n  },\r\n  post: async (url: string, data: object) => {\r\n    const response = await fetch(getBaseURL(url), {\r\n      method: \"POST\",\r\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n      headers: {\r\n        \"Content-Type\": \"application/x-www-form-urlencoded\", // application/x-www-form-urlencoded, application/json\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n    return response.json(); // parses JSON response into native JavaScript objects\r\n  },\r\n};\r\n\r\nexport default service;\r\n"],"sourceRoot":""}